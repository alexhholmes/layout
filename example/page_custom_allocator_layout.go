// Code generated by layout. DO NOT EDIT.

package example

import (
	"fmt"
	"io"
	"unsafe"
)

func New() *PageCustomAllocator {
	p := &PageCustomAllocator{}
	// IMPORTANT: AllocateAlignedPage() must return a buffer of at least 4607 bytes
	// (4096 bytes for data + 511 bytes for 512-byte alignment)
	p.backing = AllocateAlignedPage()
	
	// Validate buffer size to prevent out-of-bounds access
	if len(p.backing) < 4607 {
		panic(fmt.Sprintf("AllocateAlignedPage returned buffer of %d bytes, need at least 4607", len(p.backing)))
	}
	
	// Find 512-byte aligned offset
	addr := uintptr(unsafe.Pointer(&p.backing[0]))
	offset := int(((addr + 511) &^ 511) - addr)
	
	// Slice aligned region
	p.buf = p.backing[offset : offset+4096]
	return p
}

func (p *PageCustomAllocator) MarshalLayout() ([]byte, error) {
	// Header: uint16 at [0, 2)
	*(*uint16)(unsafe.Pointer(&p.buf[0])) = p.Header

	// Body: []byte at [2, 4088)
	// Body is already sliced from p.buf, no copy needed

	// Footer: uint64 at [4088, 4096)
	*(*uint64)(unsafe.Pointer(&p.buf[4088])) = p.Footer

	return p.buf[:], nil
}

func (p *PageCustomAllocator) UnmarshalLayout() error {
	// Header: uint16 at [0, 2)
	p.Header = *(*uint16)(unsafe.Pointer(&p.buf[0]))

	// Body: []byte at [2, 4088)
	p.Body = p.buf[2:4088]

	// Footer: uint64 at [4088, 4096)
	p.Footer = *(*uint64)(unsafe.Pointer(&p.buf[4088]))

	return nil
}

func (p *PageCustomAllocator) LoadFrom(r io.Reader) error {
	if _, err := io.ReadFull(r, p.buf[:]); err != nil {
		return err
	}
	return p.UnmarshalLayout()
}

func (p *PageCustomAllocator) WriteTo(w io.Writer) error {
	if _, err := p.MarshalLayout(); err != nil {
		return err
	}
	_, err := w.Write(p.buf[:])
	return err
}

