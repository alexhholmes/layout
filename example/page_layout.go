// Code generated by layout. DO NOT EDIT.

package example

import (
	"encoding/binary"
	"fmt"
)

func (p *Page) MarshalLayout() ([]byte, error) {
	buf := make([]byte, 4096)

	// Header: uint16 at [0, 2)
	binary.LittleEndian.PutUint16(buf[0:2], p.Header)

	// Body: []byte at [2, 4088)
	offset := 2
	for i := range p.Body {
		if offset >= 4088 {
			return nil, fmt.Errorf("Body collision at offset %d", offset)
		}
		buf[offset] = p.Body[i]
		offset++
	}

	// Footer: uint64 at [4088, 4096)
	binary.LittleEndian.PutUint64(buf[4088:4096], p.Footer)

	return buf, nil
}

func (p *Page) UnmarshalLayout(buf []byte) error {
	if len(buf) != 4096 {
		return fmt.Errorf("expected 4096 bytes, got %d", len(buf))
	}

	// Header: uint16 at [0, 2)
	p.Header = binary.LittleEndian.Uint16(buf[0:2])

	// Body: []byte at [2, 4088)
	bLen := 4088 - 2
	// Reuse buffer if capacity allows
	if cap(p.Body) >= bLen {
		p.Body = p.Body[:bLen]
	} else {
		p.Body = make([]byte, bLen)
	}
	copy(p.Body, buf[2:4088])

	// Footer: uint64 at [4088, 4096)
	p.Footer = binary.LittleEndian.Uint64(buf[4088:4096])

	return nil
}

